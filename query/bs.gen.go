// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"test-gorm-gen/b/models"
)

func newB(db *gorm.DB, opts ...gen.DOOption) b {
	_b := b{}

	_b.bDo.UseDB(db, opts...)
	_b.bDo.UseModel(&models.B{})

	tableName := _b.bDo.TableName()
	_b.ALL = field.NewAsterisk(tableName)
	_b.AID = field.NewUint(tableName, "a_id")
	_b.Six = field.NewString(tableName, "six")
	_b.A = bBelongsToA{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("A", "models.A"),
	}

	_b.fillFieldMap()

	return _b
}

type b struct {
	bDo bDo

	ALL field.Asterisk
	AID field.Uint
	Six field.String
	A   bBelongsToA

	fieldMap map[string]field.Expr
}

func (b b) Table(newTableName string) *b {
	b.bDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b b) As(alias string) *b {
	b.bDo.DO = *(b.bDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *b) updateTableName(table string) *b {
	b.ALL = field.NewAsterisk(table)
	b.AID = field.NewUint(table, "a_id")
	b.Six = field.NewString(table, "six")

	b.fillFieldMap()

	return b
}

func (b *b) WithContext(ctx context.Context) IBDo { return b.bDo.WithContext(ctx) }

func (b b) TableName() string { return b.bDo.TableName() }

func (b b) Alias() string { return b.bDo.Alias() }

func (b b) Columns(cols ...field.Expr) gen.Columns { return b.bDo.Columns(cols...) }

func (b *b) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *b) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 3)
	b.fieldMap["a_id"] = b.AID
	b.fieldMap["six"] = b.Six

}

func (b b) clone(db *gorm.DB) b {
	b.bDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b b) replaceDB(db *gorm.DB) b {
	b.bDo.ReplaceDB(db)
	return b
}

type bBelongsToA struct {
	db *gorm.DB

	field.RelationField
}

func (a bBelongsToA) Where(conds ...field.Expr) *bBelongsToA {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a bBelongsToA) WithContext(ctx context.Context) *bBelongsToA {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a bBelongsToA) Session(session *gorm.Session) *bBelongsToA {
	a.db = a.db.Session(session)
	return &a
}

func (a bBelongsToA) Model(m *models.B) *bBelongsToATx {
	return &bBelongsToATx{a.db.Model(m).Association(a.Name())}
}

type bBelongsToATx struct{ tx *gorm.Association }

func (a bBelongsToATx) Find() (result *models.A, err error) {
	return result, a.tx.Find(&result)
}

func (a bBelongsToATx) Append(values ...*models.A) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a bBelongsToATx) Replace(values ...*models.A) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a bBelongsToATx) Delete(values ...*models.A) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a bBelongsToATx) Clear() error {
	return a.tx.Clear()
}

func (a bBelongsToATx) Count() int64 {
	return a.tx.Count()
}

type bDo struct{ gen.DO }

type IBDo interface {
	gen.SubQuery
	Debug() IBDo
	WithContext(ctx context.Context) IBDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBDo
	WriteDB() IBDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBDo
	Not(conds ...gen.Condition) IBDo
	Or(conds ...gen.Condition) IBDo
	Select(conds ...field.Expr) IBDo
	Where(conds ...gen.Condition) IBDo
	Order(conds ...field.Expr) IBDo
	Distinct(cols ...field.Expr) IBDo
	Omit(cols ...field.Expr) IBDo
	Join(table schema.Tabler, on ...field.Expr) IBDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBDo
	Group(cols ...field.Expr) IBDo
	Having(conds ...gen.Condition) IBDo
	Limit(limit int) IBDo
	Offset(offset int) IBDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBDo
	Unscoped() IBDo
	Create(values ...*models.B) error
	CreateInBatches(values []*models.B, batchSize int) error
	Save(values ...*models.B) error
	First() (*models.B, error)
	Take() (*models.B, error)
	Last() (*models.B, error)
	Find() ([]*models.B, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.B, err error)
	FindInBatches(result *[]*models.B, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.B) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBDo
	Assign(attrs ...field.AssignExpr) IBDo
	Joins(fields ...field.RelationField) IBDo
	Preload(fields ...field.RelationField) IBDo
	FirstOrInit() (*models.B, error)
	FirstOrCreate() (*models.B, error)
	FindByPage(offset int, limit int) (result []*models.B, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bDo) Debug() IBDo {
	return b.withDO(b.DO.Debug())
}

func (b bDo) WithContext(ctx context.Context) IBDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bDo) ReadDB() IBDo {
	return b.Clauses(dbresolver.Read)
}

func (b bDo) WriteDB() IBDo {
	return b.Clauses(dbresolver.Write)
}

func (b bDo) Session(config *gorm.Session) IBDo {
	return b.withDO(b.DO.Session(config))
}

func (b bDo) Clauses(conds ...clause.Expression) IBDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bDo) Returning(value interface{}, columns ...string) IBDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bDo) Not(conds ...gen.Condition) IBDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bDo) Or(conds ...gen.Condition) IBDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bDo) Select(conds ...field.Expr) IBDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bDo) Where(conds ...gen.Condition) IBDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bDo) Order(conds ...field.Expr) IBDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bDo) Distinct(cols ...field.Expr) IBDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bDo) Omit(cols ...field.Expr) IBDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bDo) Join(table schema.Tabler, on ...field.Expr) IBDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bDo) RightJoin(table schema.Tabler, on ...field.Expr) IBDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bDo) Group(cols ...field.Expr) IBDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bDo) Having(conds ...gen.Condition) IBDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bDo) Limit(limit int) IBDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bDo) Offset(offset int) IBDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bDo) Unscoped() IBDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bDo) Create(values ...*models.B) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bDo) CreateInBatches(values []*models.B, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bDo) Save(values ...*models.B) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bDo) First() (*models.B, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.B), nil
	}
}

func (b bDo) Take() (*models.B, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.B), nil
	}
}

func (b bDo) Last() (*models.B, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.B), nil
	}
}

func (b bDo) Find() ([]*models.B, error) {
	result, err := b.DO.Find()
	return result.([]*models.B), err
}

func (b bDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.B, err error) {
	buf := make([]*models.B, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bDo) FindInBatches(result *[]*models.B, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bDo) Attrs(attrs ...field.AssignExpr) IBDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bDo) Assign(attrs ...field.AssignExpr) IBDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bDo) Joins(fields ...field.RelationField) IBDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bDo) Preload(fields ...field.RelationField) IBDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bDo) FirstOrInit() (*models.B, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.B), nil
	}
}

func (b bDo) FirstOrCreate() (*models.B, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.B), nil
	}
}

func (b bDo) FindByPage(offset int, limit int) (result []*models.B, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bDo) Delete(models ...*models.B) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bDo) withDO(do gen.Dao) *bDo {
	b.DO = *do.(*gen.DO)
	return b
}
