// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"test-gorm-gen/a/models"
)

func newA(db *gorm.DB, opts ...gen.DOOption) a {
	_a := a{}

	_a.aDo.UseDB(db, opts...)
	_a.aDo.UseModel(&models.A{})

	tableName := _a.aDo.TableName()
	_a.ALL = field.NewAsterisk(tableName)
	_a.ID = field.NewUint(tableName, "id")
	_a.Name = field.NewString(tableName, "name")

	_a.fillFieldMap()

	return _a
}

type a struct {
	aDo aDo

	ALL  field.Asterisk
	ID   field.Uint
	Name field.String

	fieldMap map[string]field.Expr
}

func (a a) Table(newTableName string) *a {
	a.aDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a a) As(alias string) *a {
	a.aDo.DO = *(a.aDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *a) updateTableName(table string) *a {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.Name = field.NewString(table, "name")

	a.fillFieldMap()

	return a
}

func (a *a) WithContext(ctx context.Context) IADo { return a.aDo.WithContext(ctx) }

func (a a) TableName() string { return a.aDo.TableName() }

func (a a) Alias() string { return a.aDo.Alias() }

func (a a) Columns(cols ...field.Expr) gen.Columns { return a.aDo.Columns(cols...) }

func (a *a) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *a) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 2)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
}

func (a a) clone(db *gorm.DB) a {
	a.aDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a a) replaceDB(db *gorm.DB) a {
	a.aDo.ReplaceDB(db)
	return a
}

type aDo struct{ gen.DO }

type IADo interface {
	gen.SubQuery
	Debug() IADo
	WithContext(ctx context.Context) IADo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IADo
	WriteDB() IADo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IADo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IADo
	Not(conds ...gen.Condition) IADo
	Or(conds ...gen.Condition) IADo
	Select(conds ...field.Expr) IADo
	Where(conds ...gen.Condition) IADo
	Order(conds ...field.Expr) IADo
	Distinct(cols ...field.Expr) IADo
	Omit(cols ...field.Expr) IADo
	Join(table schema.Tabler, on ...field.Expr) IADo
	LeftJoin(table schema.Tabler, on ...field.Expr) IADo
	RightJoin(table schema.Tabler, on ...field.Expr) IADo
	Group(cols ...field.Expr) IADo
	Having(conds ...gen.Condition) IADo
	Limit(limit int) IADo
	Offset(offset int) IADo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IADo
	Unscoped() IADo
	Create(values ...*models.A) error
	CreateInBatches(values []*models.A, batchSize int) error
	Save(values ...*models.A) error
	First() (*models.A, error)
	Take() (*models.A, error)
	Last() (*models.A, error)
	Find() ([]*models.A, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.A, err error)
	FindInBatches(result *[]*models.A, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.A) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IADo
	Assign(attrs ...field.AssignExpr) IADo
	Joins(fields ...field.RelationField) IADo
	Preload(fields ...field.RelationField) IADo
	FirstOrInit() (*models.A, error)
	FirstOrCreate() (*models.A, error)
	FindByPage(offset int, limit int) (result []*models.A, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IADo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aDo) Debug() IADo {
	return a.withDO(a.DO.Debug())
}

func (a aDo) WithContext(ctx context.Context) IADo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aDo) ReadDB() IADo {
	return a.Clauses(dbresolver.Read)
}

func (a aDo) WriteDB() IADo {
	return a.Clauses(dbresolver.Write)
}

func (a aDo) Session(config *gorm.Session) IADo {
	return a.withDO(a.DO.Session(config))
}

func (a aDo) Clauses(conds ...clause.Expression) IADo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aDo) Returning(value interface{}, columns ...string) IADo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aDo) Not(conds ...gen.Condition) IADo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aDo) Or(conds ...gen.Condition) IADo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aDo) Select(conds ...field.Expr) IADo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aDo) Where(conds ...gen.Condition) IADo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aDo) Order(conds ...field.Expr) IADo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aDo) Distinct(cols ...field.Expr) IADo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aDo) Omit(cols ...field.Expr) IADo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aDo) Join(table schema.Tabler, on ...field.Expr) IADo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aDo) LeftJoin(table schema.Tabler, on ...field.Expr) IADo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aDo) RightJoin(table schema.Tabler, on ...field.Expr) IADo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aDo) Group(cols ...field.Expr) IADo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aDo) Having(conds ...gen.Condition) IADo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aDo) Limit(limit int) IADo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aDo) Offset(offset int) IADo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IADo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aDo) Unscoped() IADo {
	return a.withDO(a.DO.Unscoped())
}

func (a aDo) Create(values ...*models.A) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aDo) CreateInBatches(values []*models.A, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aDo) Save(values ...*models.A) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aDo) First() (*models.A, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.A), nil
	}
}

func (a aDo) Take() (*models.A, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.A), nil
	}
}

func (a aDo) Last() (*models.A, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.A), nil
	}
}

func (a aDo) Find() ([]*models.A, error) {
	result, err := a.DO.Find()
	return result.([]*models.A), err
}

func (a aDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.A, err error) {
	buf := make([]*models.A, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aDo) FindInBatches(result *[]*models.A, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aDo) Attrs(attrs ...field.AssignExpr) IADo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aDo) Assign(attrs ...field.AssignExpr) IADo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aDo) Joins(fields ...field.RelationField) IADo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aDo) Preload(fields ...field.RelationField) IADo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aDo) FirstOrInit() (*models.A, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.A), nil
	}
}

func (a aDo) FirstOrCreate() (*models.A, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.A), nil
	}
}

func (a aDo) FindByPage(offset int, limit int) (result []*models.A, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aDo) Delete(models ...*models.A) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aDo) withDO(do gen.Dao) *aDo {
	a.DO = *do.(*gen.DO)
	return a
}
